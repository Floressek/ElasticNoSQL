input {
  # HTTP input - odbiera dane z Flask servera
  http {
    host => "0.0.0.0"
    port => 8080
    codec => json
    tags => ["flask-api", "sprzedaz"]
  }
  
  # Generator testowy (backup)
  generator {
    message => '{"timestamp": "%{+yyyy-MM-dd HH:mm:ss}", "level": "INFO", "service": "test-generator", "message": "Test log entry", "amount": %{+s}}'
    count => 10
    tags => ["generated", "test"]
  }
}

filter {
  # Przetwarzanie danych sprzedaży z Flask
  if "flask-api" in [tags] {
    
    # Parsowanie timestamp
    if [timestamp] {
      date {
        match => [ "timestamp", "ISO8601" ]
        target => "@timestamp"
      }
    }
    
    # Wzbogacenie danych geolokalizacyjnych
    if [customer_ip] {
      geoip {
        source => "customer_ip"
        target => "customer_geoip"
      }
    }
    
    # Dodanie dodatkowych metadanych
    mutate {
      add_field => { 
        "data_source" => "flask_api"
        "processed_by" => "logstash"
        "business_hour" => "%{+HH}"
      }
    }
    
    # Klasyfikacja transakcji według wartości
    if [amount_net] {
      ruby {
        code => '
          amount = event.get("amount_net").to_f
          if amount >= 5000
            event.set("transaction_class", "premium")
            event.set("priority", "high")
          elsif amount >= 2000
            event.set("transaction_class", "standard")
            event.set("priority", "medium")
          else
            event.set("transaction_class", "basic")
            event.set("priority", "low")
          end
        '
      }
    }
    
    # Tagowanie według kategorii produktu
    if [product_category] {
      if [product_category] == "elektronika" {
        mutate { add_tag => ["high-value-category"] }
      }
      if [product_category] == "gaming" {
        mutate { add_tag => ["entertainment"] }
      }
      if [product_category] == "telefony" {
        mutate { add_tag => ["mobile-devices"] }
      }
    }
    
    # Alerty dla dużych transakcji
    if [amount_net] and [amount_net] >= 8000 {
      mutate { 
        add_tag => ["alert", "high-value-transaction"]
        add_field => { "alert_reason" => "Transaction over 8000 PLN" }
      }
    }
    
    # Dodanie informacji o marży (symulowane)
    if [unit_price] {
      ruby {
        code => '
          price = event.get("unit_price").to_f
          # Symulowana marża według kategorii
          category = event.get("product_category")
          margin_percent = case category
            when "elektronika" then 15
            when "telefony" then 20
            when "gaming" then 25
            when "audio" then 30
            else 20
          end
          
          margin_amount = price * (margin_percent / 100.0)
          event.set("margin_percent", margin_percent)
          event.set("margin_amount", margin_amount.round(2))
        '
      }
    }
  }
  
  # Przetwarzanie logów testowych
  if "test" in [tags] {
    json {
      source => "message"
    }
    
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
      target => "@timestamp"
    }
  }
  
  # Wspólne przetwarzanie
  mutate {
    add_field => { 
      "logstash_processed_at" => "%{+yyyy-MM-dd HH:mm:ss}"
      "environment" => "development"
    }
  }
}

output {
  # Główny indeks sprzedaży
  if "sprzedaz" in [tags] {
    elasticsearch {
      hosts => ["es-data-1:9200", "es-data-2:9200"]
      index => "sprzedaz-%{+yyyy.MM.dd}"
      template_name => "sprzedaz-template"
      template => "/usr/share/logstash/config/sprzedaz-template.json"
      template_overwrite => true
    }
  }
  
  # Indeks alertów dla wysokich transakcji
  if "alert" in [tags] {
    elasticsearch {
      hosts => ["es-data-1:9200", "es-data-2:9200"]
      index => "alerty-%{+yyyy.MM.dd}"
    }
  }
  
  # Wszystkie logi do głównego indeksu
  elasticsearch {
    hosts => ["es-data-1:9200", "es-data-2:9200"]
    index => "logs-%{+yyyy.MM.dd}"
  }
  
  # Debug output
  stdout {
    codec => rubydebug {
      metadata => false
    }
  }
}